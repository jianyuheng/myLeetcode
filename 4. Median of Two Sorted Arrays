#python3
# Time:  O(log(min(m, n)))
# Space: O(1)
 
# There are two sorted arrays nums1 and nums2 of size m and n respectively.
# Find the median of the two sorted arrays.
# The overall run time complexity should be O(log (m+n)).

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        len1, len2 = len(nums1), len(nums2)
        if (len1 + len2) % 2 == 1: 
            return self.getKth(nums1, nums2, (len1 + len2)/2 + 1)
        else:
            return (self.getKth(nums1, nums2, (len1 + len2)/2) + \
                    self.getKth(nums1, nums2, (len1 + len2)/2 + 1)) * 0.5

    def getKth(self, A, B, k):
        m, n = len(A), len(B)
        if m > n:
            return self.getKth(B, A, k)

        left, right = 0, m    
        while left < right:
            mid = left + (right - left) / 2
            if 0 <= k - 1 - mid < n and A[mid] >= B[k - 1 - mid]:
                right = mid
            else:
                left = mid + 1

        Ai_minus_1 = A[left - 1] if left - 1 >= 0 else float("-inf")
        Bj = B[k - 1 - left] if k - 1 - left >= 0 else float("-inf")

        return max(Ai_minus_1, Bj)


# Time:  O(log(max(m, n)) * log(max_val - min_val))
# Space: O(1)
# Generic solution.
class Solution_Generic(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        len1, len2 = len(nums1), len(nums2)
        if (len1 + len2) % 2 == 1: 
            return self.getKth([nums1, nums2], (len1 + len2)/2 + 1)
        else:
            return (self.getKth([nums1, nums2], (len1 + len2)/2) + \
                    self.getKth([nums1, nums2], (len1 + len2)/2 + 1)) * 0.5

    def getKth(self, arrays, k):
        def binary_search(array, left, right, target, compare):
            while left <= right:
                mid = left + (right - left) / 2
                if compare(array, mid, target):
                    right = mid - 1
                else:
                    left = mid + 1
            return left

        def match(arrays, num, target):
            res = 0
            for array in arrays:
                if array:
                    res += len(array) - binary_search(array, 0, len(array) - 1, num, \
                                                      lambda array, x, y: array[x] > y)
            return res < target

        left, right = float("inf"), float("-inf")
        for array in arrays:
            if array:
                left = min(left, array[0])
                right = max(right, array[-1])

        return binary_search(arrays, left, right, k, match)

#c++
class Solution {
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		//奇数的中位数
		if ((nums1.size() + nums2.size()) % 2 == 1) {
			return findKthInTwoSortedArrays(nums1, nums2, (nums1.size() + nums2.size()) / 2 + 1);
		}
		//偶数的中位数
		else {
			return (findKthInTwoSortedArrays(nums1, nums2, (nums1.size() + nums2.size()) / 2) +
				findKthInTwoSortedArrays(nums1, nums2, (nums1.size() + nums2.size()) / 2 + 1)) / 2.0;
		}
	}

	int findKthInTwoSortedArrays(const vector<int>& A, const vector<int>& B,
		int k) {
		const int m = A.size();
		const int n = B.size();

		// Make sure m is the smaller one.
		if (m > n) {
			return findKthInTwoSortedArrays(B, A, k);
		}

		int left = 0;
		int right = m;
		// Find a partition of A and B
		// where min left s.t. A[left] >= B[k - 1 - left]. Thus A[left] is the (k+1)-th or above element.

		//while循环退出时，left = right = mid
		while (left < right) {
			int mid = left + (right - left) / 2;
			if (0 <= k - 1 - mid && k - 1 - mid < n && A[mid] >= B[k - 1 - mid]) {
				right = mid;
			}
			else {
				left = mid + 1;
			}
		}

		//如果A[right-1]<B[k-right]
		int Ai_minus_1 = left - 1 >= 0 ? A[left - 1] : numeric_limits<int>::min();
		int Bj = k - 1 - left >= 0 ? B[k - 1 - left] : numeric_limits<int>::min();

		// kth element would be A[left - 1] or B[k - 1 - left].
		return max(Ai_minus_1, Bj);
	}
};

???????????????????????????????????????????????????????????????????????????????????????????????????????????
// Time:  O(log(max(m, n)) * log(max_val - min_val))
// Space: O(1)
// Generic solution.
class Solution_Generic {
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		vector<vector<int> *> arrays{ &nums1, &nums2 };
		if ((nums1.size() + nums2.size()) % 2 == 1) {
			return findKthInSortedArrays(arrays, (nums1.size() + nums2.size()) / 2 + 1);
		}
		else {
			return (findKthInSortedArrays(arrays, (nums1.size() + nums2.size()) / 2) +
				findKthInSortedArrays(arrays, (nums1.size() + nums2.size()) / 2 + 1)) / 2.0;
		}
	}

private:
	int findKthInSortedArrays(const vector<vector<int> *>& arrays, int k) {
		int left = numeric_limits<int>::max();
		int right = numeric_limits<int>::min();
		for (const auto array : arrays) {
			if (!array->empty()) {
				left = min(left, array->front());
				right = max(right, array->back());
			}
		}
		// left xxxxxxxooooooo right, find first xo or oo
		while (left <= right) {
			const auto mid = left + (right - left) / 2;
			if (match(arrays, mid, k)) {
				right = mid - 1;
			}
			else {
				left = mid + 1;
			}
		}
		return left;
	}

	bool match(const vector<vector<int> *>& arrays, int num, int target) {
		int res = 0;
		for (const auto array : arrays) {
			if (!array->empty()) {
				res += distance(upper_bound(array->cbegin(), array->cend(), num),
					array->cend());
			}
		}
		return res < target;
	}
};
